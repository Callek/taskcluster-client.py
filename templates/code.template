#!/usr/bin/env python
# -*- coding: utf-8 -*-
{{generatedString}}
'''
{{api['title']}}
'''
from __future__ import absolute_import, division, print_function

import logging
import taskcluster.baseclient as baseclient

log = logging.getLogger(__name__)


class {{serviceName}}(baseclient.BaseClient):
    '''
    {{api['title']}}
    {{api['description'] | docstring}}
    '''
    version = {{api['version']}}
    referenceUrl = '{{referenceUrl}}'
{%- if createRoutes(api) %}
    routes = {
        {{createRoutes(api) | indent(8)}}
    }
{% endif %}
{%- if createRoutingKeys(api) %}
    routingKeys = {
    {{createRoutingKeys(api) | indent(4)}}
    }
{% endif %}
    def __init__(self, *args, **kwargs):
        self.classOptions = {}
{%- for item in ['baseUrl', 'exchangePrefix'] -%}
    {%- if item in api %}
        self.classOptions['{{ item }}'] = '{{api[item]}}'
    {%- endif -%}
{%- endfor %}
        super({{serviceName}}, self).__init__(*args, **kwargs)
{%- if api.entries -%}
    {%- for entry in api['entries'] -%}
        {%- if entry['type'] == 'function' %}

    def {{entry['name']}}({{argumentString(entry, methodArgs=True)}}):
        '''
        {{entry['title']}}

        {{entry['description'] | docstring(8)}}
            {%- if entry.args %}

        This method takes:
                {%- for arg in entry.args %}
        - ``{{arg}}``

                {%- endfor %}
            {%- else %}

        This method takes no arguments.
            {%- endif %}
        '''
        route = self.makeRoute('{{ entry.name }}'
            {%- if entry.args %}, replDict={
                {%- for a in entry['args'] %}
            '{{a}}': {{a}},{% endfor %}
        }
            {%- endif -%})
            {%- if entry.query %}
        validOptions = {{entry.query}}
            {%- endif %}
        return self._makeHttpRequest('{{entry.method}}', route{% if entry.input %}, payload{% endif %}{% if entry.query %}, options=options, validOptions=validOptions{% endif %})
        {%- elif entry['type'] == 'topic-exchange' %}

    def {{entry['name']}}(self, routingKeyPattern=None):
        '''
        {{entry['title']}}

        {{entry['description'] | docstring(8)}}

        Generate a routing key pattern for the {{entry['exchange']}} exchange.
        This method takes a given routing key as a string or a dictionary.  For each given
        dictionary key, the corresponding routing key token takes its value.  For routing key
        tokens which are not specified by the dictionary, the * or # character is used depending
        on whether or not the key allows multiple words.

        This exchange takes the following keys:
                {%- for arg in entry.routingKey %}
        - ``{{arg.name}}``

                {%- endfor %}
        '''
        exchangeUrl = '%s/%s' % (self.options['exchangePrefix'].rstrip('/'),
                                 "{{entry['exchange']}}".lstrip('/'))
        return self._makeTopicExchange(
            exchangeUrl,
            self.routingKeys['{{entry['name']}}'],
            routingKeyPattern
        )
        {%- endif -%}
    {%- endfor -%}
{%- endif -%}
